/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : FMSTR1.h
**     Project     : TPPFC_MC56F82748_V1.0
**     Processor   : MC56F82748VLH
**     Component   : FreeMaster
**     Version     : Component 01.129, Driver 01.06, CPU db: 3.50.001
**     Compiler    : CodeWarrior DSP C Compiler
**     Date/Time   : 2022-01-28, 14:02, # CodeGen: 6
**     Abstract    :
**          This component encapsulates the FreeMASTER driver. The FreeMASTER
**          driver implements all the features necessary to establish a communication
**          with the FreeMASTER visualization tool.
**     Settings    :
**          Init_SCI                             : QSCI1
**
**          Initialization:
**              Driver interrupt mode            : Polling mode 
**              Communication device             : JTAG
**              Oscilloscope enabled             : yes
**              Recorder enabled                 : yes
**              Recorder buffer length           : 900
**              Application command enabled      : no
**              Command buffer length            : 16
**              TSA enabled                      : no
**              Read/write memory commands       : yes
**              Read/write variable commands     : yes
**              Data buffer length               : 128
**     Contents    :
**         Poll       - void FMSTR1_Poll(void);
**         Recorder   - void FMSTR1_Recorder(void);
**         TriggerRec - void FMSTR1_TriggerRec(void);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file FMSTR1.h
** @version 01.06
** @brief
**          This component encapsulates the FreeMASTER driver. The FreeMASTER
**          driver implements all the features necessary to establish a communication
**          with the FreeMASTER visualization tool.
*/         
/*!
**  @addtogroup FMSTR1_module FMSTR1 module documentation
**  @{
*/         

#ifndef __FMSTR1
#define __FMSTR1

/* MODULE FMSTR1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "Init_Config.h"
#include "PDD_Includes.h"
/* Include inherited beans */
#include "Cpu.h"

/* FreeMASTER Driver main API header file */
#include "freemaster.h"


void FMSTR1_Init(void);
/*
** ===================================================================
**     Method      :  FMSTR1_Init (component FreeMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#define FMSTR1_Poll(void) FMSTR_Poll(void)
/*
** ===================================================================
**     Method      :  FMSTR1_Poll (component FreeMaster)
**     Description :
**         In the poll-driven or short interrupt modes, this function
**         handles the protocol decoding and execution. In the
**         poll-driven mode, this function also handles the SCI
**         communication. In the long interrupt mode, this function
**         compiles as an empty function and may still be called.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define FMSTR1_Isr FMSTR_Isr
/*
** ===================================================================
**     Method      :  FMSTR1_Isr (component FreeMaster)
**
**     Description :
**         Main SCI/JTAG Interrupt handler call. This Interrupt Service 
**         Routine handles the interrupts for the FreeMASTER driver.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#define FMSTR1_Recorder(void) FMSTR_Recorder(void)
/*
** ===================================================================
**     Method      :  FMSTR1_Recorder (component FreeMaster)
**     Description :
**         Recorder worker routine. This returns quickly if recorder is
**         not running, otherwise it calls quite lengthy recorder
**         routine which does all the recorder work (sampling,
**         triggering). 
**         This method is enabled only if the Recorder property is
**         enabled.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define FMSTR1_TriggerRec(void) FMSTR_TriggerRec(void)
/*
** ===================================================================
**     Method      :  FMSTR1_TriggerRec (component FreeMaster)
**     Description :
**         Pull the trigger of the recorder. This function starts the
**         post-trigger stop countdown.
**         This method is enabled only if the Recorder property is
**         enabled.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/


/* END FMSTR1. */

#endif                                 /* ifndef __FMSTR1 */

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
